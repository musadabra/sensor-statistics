[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 17.0.3)
[debug]       Load.loadUnit: plugins took 282.5153ms
[debug]       Load.loadUnit: defsScala took 0.4712ms
[debug] [Loading] Scanning directory C:\Users\dell\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\dell\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 69.1235 ms
[debug]           Load.resolveProject(global-plugins) took 116.846ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\dell\.sbt\1.0\plugins, plugins: List(<none>))) took 245.8399ms
[debug] [Loading] Done in C:\Users\dell\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 321.8463ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6744ms
[debug]     Load.loadUnit(file:/C:/Users/dell/.sbt/1.0/plugins/, ...) took 625.7046ms
[debug]   Load.apply: load took 943.5818ms
[debug]   Load.apply: resolveProjects took 8.0346ms
[debug]   Load.apply: finalTransforms took 73.6548ms
[debug]   Load.apply: config.delegates took 10.7221ms
[debug]   Load.apply: Def.make(settings)... took 647.9204ms
[debug]   Load.apply: structureIndex took 157.9879ms
[debug]   Load.apply: mkStreams took 5.9795ms
[info] loading global plugins from C:\Users\dell\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3544.0662ms
[debug]           Load.loadUnit: plugins took 28.9447ms
[debug]           Load.loadUnit: defsScala took 0.0052ms
[debug] [Loading] Scanning directory C:\Users\dell\Documents\Scala\sensor-statistics\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\dell\Documents\Scala\sensor-statistics\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.2165 ms
[debug]               Load.resolveProject(sensor-statistics-build) took 1.283ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sensor-statistics-build, base: C:\Users\dell\Documents\Scala\sensor-statistics\project, plugins: List(<none>))) took 5.0461ms
[debug] [Loading] Done in C:\Users\dell\Documents\Scala\sensor-statistics\project, returning: (sensor-statistics-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 7.4498ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.013ms
[debug]         Load.loadUnit(file:/C:/Users/dell/Documents/Scala/sensor-statistics/project/, ...) took 37.5032ms
[debug]       Load.apply: load took 39.1271ms
[debug]       Load.apply: resolveProjects took 0.1064ms
[debug]       Load.apply: finalTransforms took 11.8786ms
[debug]       Load.apply: config.delegates took 0.4819ms
[debug]       Load.apply: Def.make(settings)... took 91.7398ms
[debug]       Load.apply: structureIndex took 47.8969ms
[debug]       Load.apply: mkStreams took 0.0033ms
[info] loading project definition from C:\Users\dell\Documents\Scala\sensor-statistics\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 521.4498ms
[debug]     Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\dell\Documents\Scala\sensor-statistics
[debug]       Load.loadUnit: mkEval took 7.1729ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.4081 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 3.0273ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\dell\Documents\Scala\sensor-statistics, plugins: List(<none>))) took 7.01ms
[debug] [Loading] Done in C:\Users\dell\Documents\Scala\sensor-statistics, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 274.9043ms
[debug]     Load.loadUnit: cleanEvalClasses took 26.3459ms
[debug]   Load.loadUnit(file:/C:/Users/dell/Documents/Scala/sensor-statistics/, ...) took 824.0992ms
[debug] Load.apply: load took 826.9787ms
[debug] Load.apply: resolveProjects took 0.9189ms
[debug] Load.apply: finalTransforms took 14.6655ms
[debug] Load.apply: config.delegates took 0.5751ms
[debug] Load.apply: Def.make(settings)... took 107.676ms
[debug] Load.apply: structureIndex took 60.3259ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to sensor-statistics (in build file:/C:/Users/dell/Documents/Scala/sensor-statistics/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(run SensorStatistics C:\Users\dell\Documents\Scala\sensor-statistics, None, None)
[debug] Evaluating tasks: Compile / run
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
